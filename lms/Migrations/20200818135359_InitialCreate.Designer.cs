// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lms.Data;

namespace lms.Migrations
{
    [DbContext(typeof(lmsContext))]
    [Migration("20200818135359_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("lms.Models.Appraisal", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("isEditable")
                        .HasColumnType("tinyint");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseTypeId");

                    b.ToTable("appraisal","picklist");
                });

            modelBuilder.Entity("lms.Models.AssessmentItemType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("assessment_item_type","picklist");
                });

            modelBuilder.Entity("lms.Models.AssessmentType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("assessment_type","picklist");
                });

            modelBuilder.Entity("lms.Models.Category", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("isEditable")
                        .HasColumnType("tinyint");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("course_category","picklist");
                });

            modelBuilder.Entity("lms.Models.CourseAssessment", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("assessmentTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("attempts")
                        .HasColumnType("int");

                    b.Property<byte>("basedType")
                        .HasColumnType("tinyint");

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("fromDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("isAttempts")
                        .HasColumnType("tinyint");

                    b.Property<byte>("isImmediate")
                        .HasColumnType("tinyint");

                    b.Property<byte>("isShuffle")
                        .HasColumnType("tinyint");

                    b.Property<int>("passingGrade")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("toDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("userGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("assessmentTypeId");

                    b.HasIndex("courseId");

                    b.HasIndex("userGroupId");

                    b.ToTable("course_assessment","course");
                });

            modelBuilder.Entity("lms.Models.CourseAssessmentItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("assessmentItemTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("courseAssessmentid")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<byte>("isFalse")
                        .HasColumnType("tinyint");

                    b.Property<byte>("isShuffle")
                        .HasColumnType("tinyint");

                    b.Property<byte>("isTrue")
                        .HasColumnType("tinyint");

                    b.Property<int>("maxLength")
                        .HasColumnType("int");

                    b.Property<int>("minLength")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("assessmentItemTypeId");

                    b.HasIndex("courseAssessmentid");

                    b.ToTable("course_assessment_items","course");
                });

            modelBuilder.Entity("lms.Models.CourseAssessmentItemChoices", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseAssessmentItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("isCorrect")
                        .HasColumnType("tinyint");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseAssessmentItemId");

                    b.ToTable("course_assessment_items_choices","course");
                });

            modelBuilder.Entity("lms.Models.CourseCategory", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("categoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("categoryId");

                    b.HasIndex("courseId");

                    b.ToTable("course_category","course");
                });

            modelBuilder.Entity("lms.Models.CourseCompetencies", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("assessmentsSubmitted")
                        .HasColumnType("int");

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("final")
                        .HasColumnType("int");

                    b.Property<int>("lessonCompleted")
                        .HasColumnType("int");

                    b.Property<int>("milestonesReached")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("userGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("userGroupId");

                    b.ToTable("course_competencies","course");
                });

            modelBuilder.Entity("lms.Models.CourseCompetenciesCertificate", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("courseCompetenciesId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseCompetenciesId");

                    b.ToTable("course_competencies_certificate","course");
                });

            modelBuilder.Entity("lms.Models.CourseEvaluation", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("evaluationActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("evaluationTypeId")
                        .HasColumnType("bigint");

                    b.Property<byte>("isRequired")
                        .HasColumnType("tinyint");

                    b.Property<int>("maxValue")
                        .HasColumnType("int");

                    b.Property<int>("minValue")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("userGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("evaluationActionId");

                    b.HasIndex("evaluationTypeId");

                    b.HasIndex("userGroupId");

                    b.ToTable("course_evaluation","course");
                });

            modelBuilder.Entity("lms.Models.CourseEvaluationValues", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseEvaluationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseEvaluationId");

                    b.ToTable("course_evaluation_values","course");
                });

            modelBuilder.Entity("lms.Models.CourseInstructor", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("userGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("userGroupId");

                    b.HasIndex("userId");

                    b.ToTable("course_instructor","course");
                });

            modelBuilder.Entity("lms.Models.CourseLanguage", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("languageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("languageId");

                    b.ToTable("course_language","course");
                });

            modelBuilder.Entity("lms.Models.CourseLevel", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("levelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("levelId");

                    b.ToTable("course_level","course");
                });

            modelBuilder.Entity("lms.Models.CourseOutcome", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("userGroupId")
                        .HasColumnType("bigint");

                    b.Property<byte>("visibility")
                        .HasColumnType("tinyint");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("userGroupId");

                    b.ToTable("course_outcome","course");
                });

            modelBuilder.Entity("lms.Models.CourseOutline", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<string>("featureImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("interactiveVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("userGroupId")
                        .HasColumnType("bigint");

                    b.Property<byte>("visibility")
                        .HasColumnType("tinyint");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("userGroupId");

                    b.ToTable("course_outline","course");
                });

            modelBuilder.Entity("lms.Models.CourseOutlineMedia", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<long>("courseOutlineId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("resourceFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("courseOutlineId");

                    b.ToTable("course_outline_media","course");
                });

            modelBuilder.Entity("lms.Models.CourseOutlineMilestone", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<long>("courseOutlineId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("lessonCompleted")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("resourceFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("courseOutlineId");

                    b.ToTable("course_outline_milestone","course");
                });

            modelBuilder.Entity("lms.Models.CourseOutlinePrerequisite", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<long>("courseOutlineId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("preRequisiteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("courseOutlineId");

                    b.HasIndex("preRequisiteId");

                    b.ToTable("course_outline_prerequisite","course");
                });

            modelBuilder.Entity("lms.Models.CoursePrerequisite", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("course_prerequisite","picklist");
                });

            modelBuilder.Entity("lms.Models.CourseRelatedDetails", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("isPrerequisite")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.ToTable("course_related","course");
                });

            modelBuilder.Entity("lms.Models.CourseRelatedList", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<long>("courseRelatedId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("courseRelatedId")
                        .IsUnique();

                    b.ToTable("course_related_list","course");
                });

            modelBuilder.Entity("lms.Models.CourseSession", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<long>("courseInstructorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("sessionLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("sessionTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("userGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("courseInstructorId");

                    b.HasIndex("sessionTypeId");

                    b.HasIndex("userGroupId");

                    b.ToTable("sessions","course");
                });

            modelBuilder.Entity("lms.Models.CourseTag", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("tagId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("tagId");

                    b.ToTable("course_tags","course");
                });

            modelBuilder.Entity("lms.Models.CourseType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<long>("courseTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("courseTypeId");

                    b.ToTable("course_type","course");
                });

            modelBuilder.Entity("lms.Models.Courses", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("durationTime")
                        .HasColumnType("int");

                    b.Property<string>("durationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("featureImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("featureVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("isPublished")
                        .HasColumnType("tinyint");

                    b.Property<byte>("isVisible")
                        .HasColumnType("tinyint");

                    b.Property<long>("lmsProfile")
                        .HasColumnType("bigint");

                    b.Property<byte>("notifyInstructor")
                        .HasColumnType("tinyint");

                    b.Property<int>("passingGrade")
                        .HasColumnType("int");

                    b.Property<string>("publishDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("requestForPublish")
                        .HasColumnType("tinyint");

                    b.Property<long>("status")
                        .HasColumnType("bigint");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("courses","course");
                });

            modelBuilder.Entity("lms.Models.Department", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("isEditable")
                        .HasColumnType("tinyint");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("department","picklist");
                });

            modelBuilder.Entity("lms.Models.EvaluationAction", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("isEditable")
                        .HasColumnType("tinyint");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("evaluation_action","picklist");
                });

            modelBuilder.Entity("lms.Models.EvaluationType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("isEditable")
                        .HasColumnType("tinyint");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("evaluation_type","picklist");
                });

            modelBuilder.Entity("lms.Models.Groups", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("userGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("userGroupId");

                    b.HasIndex("userId");

                    b.ToTable("groups","settings");
                });

            modelBuilder.Entity("lms.Models.Language", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("isEditable")
                        .HasColumnType("tinyint");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("language","picklist");
                });

            modelBuilder.Entity("lms.Models.Learner", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("appraisalDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("assessmentStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<int>("courseRating")
                        .HasColumnType("int");

                    b.Property<string>("courseReview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("enrollmentType")
                        .HasColumnType("tinyint");

                    b.Property<int>("finalScore")
                        .HasColumnType("int");

                    b.Property<int>("instructorRating")
                        .HasColumnType("int");

                    b.Property<byte>("isApproved")
                        .HasColumnType("tinyint");

                    b.Property<byte>("isNotify")
                        .HasColumnType("tinyint");

                    b.Property<byte>("isRecommendCourse")
                        .HasColumnType("tinyint");

                    b.Property<string>("notificationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("overallRating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("statusId")
                        .HasColumnType("bigint");

                    b.Property<int>("totalHoursTaken")
                        .HasColumnType("int");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("assessmentStatusId");

                    b.HasIndex("courseId");

                    b.HasIndex("statusId");

                    b.HasIndex("userId");

                    b.ToTable("learner","course");
                });

            modelBuilder.Entity("lms.Models.LearnerAppraisal", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("appraisalId")
                        .HasColumnType("bigint");

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("learnerId")
                        .HasColumnType("bigint");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("appraisalId");

                    b.HasIndex("learnerId");

                    b.ToTable("learner_appraisal","course");
                });

            modelBuilder.Entity("lms.Models.LearnerCourseAssessment", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("courseAssessmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("courseAssessmentItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateTaken")
                        .HasColumnType("datetime2");

                    b.Property<int>("hoursTaken")
                        .HasColumnType("int");

                    b.Property<long>("learnerId")
                        .HasColumnType("bigint");

                    b.Property<int>("points")
                        .HasColumnType("int");

                    b.Property<long>("statusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseAssessmentId");

                    b.HasIndex("courseAssessmentItemId");

                    b.HasIndex("learnerId");

                    b.ToTable("learner_course_assessment","course");
                });

            modelBuilder.Entity("lms.Models.LearnerCourseAssessmentReminder", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("isSent")
                        .HasColumnType("tinyint");

                    b.Property<long>("learnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("learner_course_assessment_reminder","course");
                });

            modelBuilder.Entity("lms.Models.LearnerCourseOutline", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("courseEnd")
                        .HasColumnType("datetime2");

                    b.Property<long>("courseOutlineId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("courseStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("hoursTaken")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<long>("learnerId")
                        .HasColumnType("bigint");

                    b.Property<int>("score")
                        .HasColumnType("int");

                    b.Property<long>("statusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseOutlineId");

                    b.HasIndex("learnerId");

                    b.HasIndex("statusId");

                    b.ToTable("learner_course_outline","course");
                });

            modelBuilder.Entity("lms.Models.LearnerSession", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("courseEnd")
                        .HasColumnType("datetime2");

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("courseStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateScheduled")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("hoursTaken")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<long>("learnerId")
                        .HasColumnType("bigint");

                    b.Property<int>("score")
                        .HasColumnType("int");

                    b.Property<long>("sessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("statusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("learnerId");

                    b.HasIndex("sessionId");

                    b.ToTable("learner_session","course");
                });

            modelBuilder.Entity("lms.Models.Level", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("isEditable")
                        .HasColumnType("tinyint");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("course_level","picklist");
                });

            modelBuilder.Entity("lms.Models.Location", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("isEditable")
                        .HasColumnType("tinyint");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("location","picklist");
                });

            modelBuilder.Entity("lms.Models.SessionType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("isEditable")
                        .HasColumnType("tinyint");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("session_type","picklist");
                });

            modelBuilder.Entity("lms.Models.Status", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("status","settings");
                });

            modelBuilder.Entity("lms.Models.Tags", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("isEditable")
                        .HasColumnType("tinyint");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("tags","picklist");
                });

            modelBuilder.Entity("lms.Models.Types", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("isEditable")
                        .HasColumnType("tinyint");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("course_type","picklist");
                });

            modelBuilder.Entity("lms.Models.UserGroups", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("user_groups","settings");
                });

            modelBuilder.Entity("lms.Models.Users", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("birthday")
                        .HasColumnType("datetime2");

                    b.Property<long>("branchId")
                        .HasColumnType("bigint");

                    b.Property<byte>("canCreate")
                        .HasColumnType("tinyint");

                    b.Property<byte>("canModify")
                        .HasColumnType("tinyint");

                    b.Property<byte>("canRemove")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateApproved")
                        .HasColumnType("datetime2");

                    b.Property<long>("deptId")
                        .HasColumnType("bigint");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("empId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("gender")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("hireDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("internationalStatusId")
                        .HasColumnType("bigint");

                    b.Property<byte>("isActive")
                        .HasColumnType("tinyint");

                    b.Property<byte>("isAdministrator")
                        .HasColumnType("tinyint");

                    b.Property<byte>("isInstructor")
                        .HasColumnType("tinyint");

                    b.Property<byte>("isLearner")
                        .HasColumnType("tinyint");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("lastWorkingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("middleInitial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("obsId")
                        .HasColumnType("bigint");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("positionId")
                        .HasColumnType("bigint");

                    b.Property<long>("projId")
                        .HasColumnType("bigint");

                    b.Property<string>("salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("users","settings");
                });

            modelBuilder.Entity("lms.Models.Appraisal", b =>
                {
                    b.HasOne("lms.Models.Types", "CourseType")
                        .WithMany()
                        .HasForeignKey("courseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseAssessment", b =>
                {
                    b.HasOne("lms.Models.AssessmentType", "AssessmentType")
                        .WithMany()
                        .HasForeignKey("assessmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("CourseAssessment")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.UserGroups", "UserGroup")
                        .WithMany()
                        .HasForeignKey("userGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseAssessmentItem", b =>
                {
                    b.HasOne("lms.Models.AssessmentItemType", "AssessmentItemType")
                        .WithMany()
                        .HasForeignKey("assessmentItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.CourseAssessment", "CourseAssessment")
                        .WithMany("CourseAssessmentItem")
                        .HasForeignKey("courseAssessmentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseAssessmentItemChoices", b =>
                {
                    b.HasOne("lms.Models.CourseAssessmentItem", null)
                        .WithMany("CourseAssessmentItemChoices")
                        .HasForeignKey("courseAssessmentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseCategory", b =>
                {
                    b.HasOne("lms.Models.Category", "category")
                        .WithMany()
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("CourseCategory")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseCompetencies", b =>
                {
                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("CourseCompetencies")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.UserGroups", "UserGroup")
                        .WithMany()
                        .HasForeignKey("userGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseCompetenciesCertificate", b =>
                {
                    b.HasOne("lms.Models.CourseCompetencies", "CourseCompetencies")
                        .WithMany("CourseCompetenciesCertificate")
                        .HasForeignKey("courseCompetenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseEvaluation", b =>
                {
                    b.HasOne("lms.Models.EvaluationAction", "EvaluationAction")
                        .WithMany()
                        .HasForeignKey("evaluationActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.EvaluationType", "EvaluationType")
                        .WithMany()
                        .HasForeignKey("evaluationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.UserGroups", "UserGroup")
                        .WithMany()
                        .HasForeignKey("userGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseEvaluationValues", b =>
                {
                    b.HasOne("lms.Models.CourseEvaluation", null)
                        .WithMany("CourseEvaluationValues")
                        .HasForeignKey("courseEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseInstructor", b =>
                {
                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("CourseInstructor")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.UserGroups", "Usergroup")
                        .WithMany()
                        .HasForeignKey("userGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseLanguage", b =>
                {
                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("CourseLanguage")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Language", "language")
                        .WithMany()
                        .HasForeignKey("languageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseLevel", b =>
                {
                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("CourseLevel")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Level", "level")
                        .WithMany()
                        .HasForeignKey("levelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseOutcome", b =>
                {
                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("CourseOutcome")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.UserGroups", "UserGroup")
                        .WithMany()
                        .HasForeignKey("userGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseOutline", b =>
                {
                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("CourseOutline")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.UserGroups", "UserGroup")
                        .WithMany()
                        .HasForeignKey("userGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseOutlineMedia", b =>
                {
                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("CourseOutlineMedia")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.CourseOutline", null)
                        .WithMany("CourseOutlineMedia")
                        .HasForeignKey("courseOutlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseOutlineMilestone", b =>
                {
                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("CourseOutlineMilestone")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.CourseOutline", null)
                        .WithMany("CourseOutlineMilestone")
                        .HasForeignKey("courseOutlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseOutlinePrerequisite", b =>
                {
                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("CourseOutlinePrerequisite")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.CourseOutline", null)
                        .WithMany("CourseOutlinePrerequisite")
                        .HasForeignKey("courseOutlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.CoursePrerequisite", "Prerequisite")
                        .WithMany()
                        .HasForeignKey("preRequisiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseRelatedDetails", b =>
                {
                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("RelatedCourse")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseRelatedList", b =>
                {
                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.CourseRelatedDetails", "CourseRelated")
                        .WithOne("courseRelated")
                        .HasForeignKey("lms.Models.CourseRelatedList", "courseRelatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseSession", b =>
                {
                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("Session")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.CourseInstructor", "CourseInstructor")
                        .WithMany("Session")
                        .HasForeignKey("courseInstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.SessionType", "SessionType")
                        .WithMany("CourseSession")
                        .HasForeignKey("sessionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.UserGroups", "UserGroup")
                        .WithMany()
                        .HasForeignKey("userGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseTag", b =>
                {
                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("CourseTag")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Tags", "Tag")
                        .WithMany()
                        .HasForeignKey("tagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.CourseType", b =>
                {
                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("CourseType")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Types", "courseType")
                        .WithMany()
                        .HasForeignKey("courseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.Groups", b =>
                {
                    b.HasOne("lms.Models.UserGroups", "UserGroup")
                        .WithMany("Groups")
                        .HasForeignKey("userGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Users", "User")
                        .WithMany("Groups")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.Learner", b =>
                {
                    b.HasOne("lms.Models.Status", "AssessmentStatus")
                        .WithMany()
                        .HasForeignKey("assessmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany("Learner")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("statusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Users", "User")
                        .WithMany("Learner")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.LearnerAppraisal", b =>
                {
                    b.HasOne("lms.Models.Appraisal", "Appraisal")
                        .WithMany("LearnerAppraisal")
                        .HasForeignKey("appraisalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Learner", null)
                        .WithMany("LearnerAppraisal")
                        .HasForeignKey("learnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.LearnerCourseAssessment", b =>
                {
                    b.HasOne("lms.Models.CourseAssessment", "CourseAssessment")
                        .WithMany("LearnerCourseAssessment")
                        .HasForeignKey("courseAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.CourseAssessmentItem", "CourseAssessmentItem")
                        .WithMany("LearnerCourseAssessment")
                        .HasForeignKey("courseAssessmentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Learner", "Learner")
                        .WithMany("LearnerCourseAssessment")
                        .HasForeignKey("learnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.LearnerCourseOutline", b =>
                {
                    b.HasOne("lms.Models.CourseOutline", "CourseOutline")
                        .WithMany("LearnerCourseOutline")
                        .HasForeignKey("courseOutlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Learner", "Learner")
                        .WithMany()
                        .HasForeignKey("learnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("statusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms.Models.LearnerSession", b =>
                {
                    b.HasOne("lms.Models.Courses", "Course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.Learner", "Learner")
                        .WithMany("LearnerSession")
                        .HasForeignKey("learnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms.Models.CourseSession", "Session")
                        .WithMany("LearnerSession")
                        .HasForeignKey("sessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
